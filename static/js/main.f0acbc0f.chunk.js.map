{"version":3,"sources":["components/js/contact.js","components/js/index.js","App.js","serviceWorker.js","index.js"],"names":["Contact","props","contact","className","lastName","firstName","phone","gender","contacts","Contacts","state","search","handleSearchChange","e","persist","setState","target","value","this","type","onChange","filter","toLowerCase","includes","map","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTAGe,SAASA,EAAQC,GAAQ,IAC5BC,EAAaD,EAAbC,QAUA,OAEQ,yBAAKC,UAAU,QACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,YACVD,EAAQE,UAEb,yBAAKD,UAAU,aACVD,EAAQG,YAGjB,yBAAKF,UAAU,gBACX,yBAAKA,UAAU,SACVD,EAAQI,OAEb,yBAAKH,UAAU,UAtBX,SAAjBD,EAAQK,OACD,uBAAGJ,UAAU,eACG,WAAjBD,EAAQK,OACV,uBAAGJ,UAAU,sBADd,K,UCJZK,EAAW,CAAC,CACdH,UAAW,uCACXD,SAAU,qEACVE,MAAO,gBACPC,OAAQ,QACT,CACCF,UAAW,iCACXD,SAAU,+DACVE,MAAO,gBACPC,OAAQ,UACT,CACCF,UAAW,6CACXD,SAAU,mDACVE,MAAO,iBACR,CACCD,UAAW,iCACXD,SAAU,mDACVE,MAAO,gBACPC,OAAQ,UACT,CACCF,UAAW,uCACXD,SAAU,yDACVE,MAAO,gBACPC,OAAQ,QACT,CACCF,UAAW,uCACXD,SAAU,6CACVE,MAAO,gBACPC,OAAQ,SA0CKE,E,4MAtCbC,MAAQ,CACNF,WACAG,OAAQ,I,EAKVC,mBAAqB,SAACC,GACpBA,EAAEC,UACF,EAAKC,UAAU,iBAAO,CACpBJ,OAAQE,EAAEG,OAAOC,W,uDAKX,IAAD,OACCN,EAAWO,KAAKR,MAAhBC,OAER,OAEI,yBAAKR,UAAU,WACX,yBAAKA,UAAU,UACX,2BAAOA,UAAU,QAAQgB,KAAK,OAAOF,MAAON,EAAQS,SAAUF,KAAKN,sBAEtEJ,EAASa,QAAQ,SAACR,GAAD,OACb,EAAKH,MAAMC,QAASE,EAAET,SAASkB,cAAcC,SAASZ,EAAOW,gBAC3DT,EAAER,UAAUiB,cAAcC,SAASZ,EAAOW,gBAC1CT,EAAEP,MAAMiB,SAASZ,MACnBa,KAAK,SAACtB,GAAD,OACJ,kBAACF,EAAD,CAAUE,QAASA,Y,GA9BhBuB,aCvBRC,MARf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,QCIcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f0acbc0f.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../css/contact.css'\r\n\r\nexport default function Contact(props) {\r\n    const { contact }  = props;\r\n\r\n    const renderIconClass = ()=> {\r\n           if (contact.gender==='male') {\r\n               return(<i className='fa fa-male'></i>)\r\n           } else if(contact.gender==='female'){\r\n            return(<i className='fa fa-female'></i>)\r\n           }\r\n        }\r\n       \r\n            return (\r\n                \r\n                    <div className='info'>\r\n                        <div className='fullname'>\r\n                            <div className='lastName'>\r\n                                {contact.lastName}\r\n                            </div>\r\n                            <div className='firstName'>\r\n                                {contact.firstName}\r\n                            </div>   \r\n                        </div>\r\n                        <div className='info-contact'>\r\n                            <div className='phone'>\r\n                                {contact.phone}\r\n                            </div> \r\n                            <div className='gender'>\r\n                                {renderIconClass()}\r\n                            </div>    \r\n                        </div>  \r\n                    </div>\r\n                        \r\n                    \r\n                \r\n            );\r\n  }\r\n      \r\n      \r\n  \r\n    \r\n  \r\n","import React, { Component } from 'react';\r\nimport Contact from './contact';\r\nimport '../css/index.css'\r\n\r\n\r\nconst contacts = [{\r\n    firstName: \"Барней\",\r\n    lastName: \"Стинсовский\",\r\n    phone: \"+380956319521\",\r\n    gender: \"male\"\r\n}, {\r\n    firstName: \"Робин\",\r\n    lastName: \"Щербатская\",\r\n    phone: \"+380931460123\",\r\n    gender: \"female\"\r\n}, {\r\n    firstName: \"Аномный\",\r\n    lastName: \"Анонимус\",\r\n    phone: \"+380666666666\"\r\n}, {\r\n    firstName: \"Лилия\",\r\n    lastName: \"Олдровна\",\r\n    phone: \"+380504691254\",\r\n    gender: \"female\"\r\n}, {\r\n    firstName: \"Маршэн\",\r\n    lastName: \"Эриксонян\",\r\n    phone: \"+380739432123\",\r\n    gender: \"male\"\r\n}, {\r\n    firstName: \"Теодор\",\r\n    lastName: \"Мотсбэс\",\r\n    phone: \"+380956319521\",\r\n    gender: \"male\"\r\n}];\r\n\r\nclass Contacts extends Component {\r\n    state = {\r\n      contacts,\r\n      search: \"\",\r\n    };\r\n  \r\n    \r\n  \r\n    handleSearchChange = (e) => {\r\n      e.persist();\r\n      this.setState( () => ({\r\n        search: e.target.value,\r\n      }));\r\n    };\r\n  \r\n  \r\n    render() {\r\n      const { search } = this.state;\r\n  \r\n      return (\r\n        \r\n          <div className='wrapper'>\r\n              <div className='search'>\r\n                  <input className='input' type=\"text\" value={search} onChange={this.handleSearchChange}/>\r\n              </div>\r\n              {contacts.filter( (e) => (\r\n                  !this.state.search ||e.lastName.toLowerCase().includes(search.toLowerCase()) \r\n                  || e.firstName.toLowerCase().includes(search.toLowerCase()) \r\n                  || e.phone.includes(search)))\r\n                  .map( (contact) => (\r\n                    <Contact  contact={contact} />\r\n                  ))\r\n              }\r\n          </div>\r\n        \r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Contacts;","import React from 'react';\nimport './App.css';\nimport Contacts from './components/js/index'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Contacts />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}